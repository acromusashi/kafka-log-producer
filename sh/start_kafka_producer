#!/bin/bash
#--------------------------------------------------------------------------
# 概要：
#   ApacheLogをTailし、結果をKafkaBrokerに送信するKakfaProducerプロセス起動コマンド
#
# 使用方法：
#   start_kafka_producer
#--------------------------------------------------------------------------

#-----------
# 変数初期化
#-----------
USAGE_MESSAGE='Usage : start_kafka_producer'

SCRIPT_PATH=`readlink -f $0`
SCRIPT_DIR=`dirname $SCRIPT_PATH`
PRODUCER_HOME="${SCRIPT_DIR}/.."
PRODUCER_LIBPATH=${PRODUCER_HOME}/lib

# クラスパス
export PRODUCER_CLASSPATH=\
${PRODUCER_HOME}/conf:\
${PRODUCER_LIBPATH}/*\

#-----------
# 関数定義
#-----------
#+ ----------------------------------------------------
#+  指定引数の数が不正なパターンをUsageメッセージで除外
#+ ----------------------------------------------------
function checkArgNum {
  # 引数が指定された場合はエラーとする
  if [ $# -ne 0 ]
  then
    echo -e "${USAGE_MESSAGE}"
    exit 1
  fi
}

#-----------
# メイン処理
#-----------
# 引数チェック
checkArgNum $@

# 二重起動チェック
PRODUCER_PID=`pgrep -f Dkafka_producer`
if [ "${PRODUCER_PID}" != "" ]; then
  if [ "$$" != "${PRODUCER_PID}" ]; then
    echo KakfaProducerが既に起動しています...
    exit 1
  fi
fi

echo KakfaProducerを起動します...

#-------
# 本処理
#-------
# KakfaProducerの起動

nohup java -classpath ${PRODUCER_CLASSPATH} \
-Dkafka_producer                     \
-Dlogback.configurationFile=${PRODUCER_HOME}/conf/logback.xml \
-XX:+HeapDumpOnOutOfMemoryError \
acromusashi.kafka.log.producer.LinuxApacheLogProducer -c ${PRODUCER_HOME}/conf/LinuxApacheLogProducer.yaml &
